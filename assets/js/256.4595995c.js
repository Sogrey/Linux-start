(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{573:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"sort-对文本文件中所有行进行排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sort-对文本文件中所有行进行排序"}},[s._v("#")]),s._v(" sort - 对文本文件中所有行进行排序")]),s._v(" "),t("p",[s._v("以行为单位，对文本文件进行排，并输出排序结果。默认情况下，以每一行为一个单位，从首字符开始按照ASCII码向后逐个比较。")]),s._v(" "),t("p",[s._v("主要用途：")]),s._v(" "),t("ul",[t("li",[s._v("将所有输入文件的内容排序后并输出。")]),s._v(" "),t("li",[s._v("当没有文件或文件为-时，读取标准输入。")])]),s._v(" "),t("h2",{attrs:{id:"适用范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用范围"}},[s._v("#")]),s._v(" 适用范围")]),s._v(" "),t("div",{staticClass:"svg redhat"},[s._v("RedHat")]),s._v(" "),t("div",{staticClass:"svg rhel"},[s._v("RHEL")]),s._v(" "),t("div",{staticClass:"svg ubuntu"},[s._v("Ubuntu")]),s._v(" "),t("div",{staticClass:"svg centos"},[s._v("CentOS")]),s._v(" "),t("div",{staticClass:"svg debian"},[s._v("Debian")]),s._v(" "),t("div",{staticClass:"svg deepin"},[s._v("Deepin")]),s._v(" "),t("div",{staticClass:"svg suse"},[s._v("SUSE")]),s._v(" "),t("div",{staticClass:"svg opensuse"},[s._v("openSUSE")]),s._v(" "),t("div",{staticClass:"svg fedora"},[s._v("Fedora")]),s._v(" "),t("div",{staticClass:"svg linuxmint"},[s._v("Linux Mint")]),s._v(" "),t("div",{staticClass:"svg alpinelinux"},[s._v("Alpine Linux")]),s._v(" "),t("div",{staticClass:"svg archlinux"},[s._v("Arch Linux")]),s._v(" "),t("h2",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("选项"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTION"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". --files0-from"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("F\n")])])]),t("h2",{attrs:{id:"选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[s._v("#")]),s._v(" 选项")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 排序")]),s._v("\n-b, --ignore-leading-blanks    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 忽略开头的空白。")]),s._v("\n-d, --dictionary-order         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 仅考虑空白、字母、数字。")]),s._v("\n-f, --ignore-case              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将小写字母作为大写字母考虑。")]),s._v("\n-g, --general-numeric-sort     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据数字排序。")]),s._v("\n-i, --ignore-nonprinting       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 排除不可打印字符。")]),s._v("\n-M, --month-sort               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照非月份、一月、十二月的顺序排序。")]),s._v("\n-h, --human-numeric-sort       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据存储容量排序(注意使用大写字母，例如：2K 1G)。")]),s._v("\n-n, --numeric-sort             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据数字排序。")]),s._v("\n-R, --random-sort              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 随机排序，但分组相同的行。")]),s._v("\n    --random-source"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("FILE       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从FILE中获取随机长度的字节。")]),s._v("\n-r, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--reverse")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将结果倒序排列。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--sort")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("WORD                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据WORD排序，其中: general-numeric 等价于 -g，")]),s._v("\n                               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# human-numeric 等价于 -h，month 等价于 -M，numeric")]),s._v("\n                               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 等价于 -n，random 等价于 -R，version 等价于 -V。")]),s._v("\n-V, --version-sort             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 文本中(版本)数字的自然排序。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 其他 ")]),s._v("\n\n    --batch-size"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NMERGE                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一次合并最多NMERGE个输入；")]),s._v("\n                                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 超过部分使用临时文件。")]),s._v("\n-c, --check, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--check")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("diagnose-first     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查输入是否已排序，该操作不会执行排序。")]),s._v("\n-C, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--check")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("quiet, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--check")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("silent       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 类似于 -c 选项，但不输出第一个未排序的行。")]),s._v("\n    --compress-program"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("PROG             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用PROG压缩临时文件；使用PROG -d解压缩。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--debug")]),s._v("                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注释用于排序的行，发送可疑用法的警报到stderr。")]),s._v("\n    --files0-from"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("F                     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从文件F中读取以NUL结尾的所有文件名称；")]),s._v("\n                                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果F是 - ，那么从标准输入中读取名字。")]),s._v("\n-k, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--key")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("KEYDEF                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过一个key排序；KEYDEF给出位置和类型。")]),s._v("\n-m, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--merge")]),s._v("                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 合并已排序文件，之后不再排序。")]),s._v("\n-o, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--output")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("FILE                       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将结果写入FILE而不是标准输出。")]),s._v("\n-s, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--stable")]),s._v("                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过禁用最后的比较来稳定排序。")]),s._v("\n-S, --buffer-size"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SIZE                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用SIZE作为内存缓存大小。")]),s._v("\n-t, --field-separator"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SEP               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用SEP作为列的分隔符。")]),s._v("\n-T, --temporary-directory"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("DIR           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用DIR作为临时目录，而不是 $TMPDIR ")]),s._v("\n                                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或 /tmp；多次使用该选项指定多个临时目录。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--parallel")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("N                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将并发运行的排序数更改为N。")]),s._v("\n-u, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--unique")]),s._v("                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 同时使用-c，严格检查排序；不同时使用-c，")]),s._v("\n                                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出排序后去重的结果。")]),s._v("\n-z, --zero-terminated                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置行终止符为NUL（空），而不是换行符。")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--help")]),s._v("                              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示帮助信息并退出。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--version")]),s._v("                           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示版本信息并退出。")]),s._v("\n")])])]),t("blockquote",[t("p",[s._v("KEYDEF的格式为：F[.C][OPTS][,F[.C][OPTS]] ，表示开始到结束的位置。")]),s._v(" "),t("p",[s._v("F表示列的编号")]),s._v(" "),t("p",[s._v("C表示")]),s._v(" "),t("p",[s._v("OPTS为[bdfgiMhnRrV]中的一到多个字符，用于覆盖当前排序选项。")]),s._v(" "),t("p",[s._v("使用--debug选项可诊断出错误的用法。")])]),s._v(" "),t("h2",{attrs:{id:"返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[s._v("#")]),s._v(" 返回值")]),s._v(" "),t("p",[s._v("返回0表示成功，返回非0值表示失败。")]),s._v(" "),t("h2",{attrs:{id:"举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[s._v("#")]),s._v(" 举例")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sogrey@bogon 文档"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nbackup  demos\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sogrey@bogon 文档"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" demos\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\ntest2.txt  test3.txt  test4.txt  test.txt\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" test.txt\n石家庄今日新增16例确诊病例\n中国留美博士遇害 美驻华使馆慰问\n特朗普夫人发文谴责国会暴乱\n理塘文旅公司回应丁真抽烟\n北京一确诊者隐瞒行程不配合流调\n山西晋中新增2例无症状感染者\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" test.txt\n北京一确诊者隐瞒行程不配合流调\n理塘文旅公司回应丁真抽烟\n山西晋中新增2例无症状感染者\n石家庄今日新增16例确诊病例\n特朗普夫人发文谴责国会暴乱\n中国留美博士遇害 美驻华使馆慰问\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ \n\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);