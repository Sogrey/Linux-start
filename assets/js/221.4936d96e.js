(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{537:function(a,t,s){"use strict";s.r(t);var e=s(14),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"patch-为开放源代码软件安装补丁程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#patch-为开放源代码软件安装补丁程序"}},[a._v("#")]),a._v(" patch - 为开放源代码软件安装补丁程序")]),a._v(" "),t("p",[a._v("patch命令 被用于为开放源代码软件安装补丁程序。让用户利用设置修补文件的方式，修改，更新原始文件。如果一次仅修改一个文件，可直接在命令列中下达指令依序执行。如果配合修补文件的方式则能一次修补大批文件，这也是Linux系统核心的升级方法之一。")]),a._v(" "),t("p",[a._v("使用diff指令比较两个文件的差异，将差异结果保存到一个文件patchfile，patch指令可以将这个patchfile更新到原始文件中。这个命令的实际作用就是修补补丁，Linux内核用的就是这种更新方式。")]),a._v(" "),t("p",[a._v("patch程序接受包含由diff程序生成的差异列表的补丁文件，并将这些差异应用于一个或多个原始文件，生成修补版本。通常，修补版本被放在正本上。可以进行备份；请参阅-b或-备份选项。要修补的文件的名称通常取自修补程序文件，但如果只有一个要修补的文件，则可以在命令行中将其指定为原始文件。启动时，patch试图确定diff列表的类型，除非被“-c(--context)”,“-e (--ed)“,“-n (--normal)”,“-u (--unified)“选项所否决。Context diffs和normal diffs是由补丁程序本身应用的，而ed diffs只是通过管道提供给ed(1)编辑器。patch尝试跳过任何前导垃圾，应用差异，然后跳过任何跟踪垃圾。因此，您可以将包含diff列表的文章或消息提供给patch。")]),a._v(" "),t("p",[a._v("使用上下文差异，并在较小程度上与正常的差异，补丁可以检测什么时候，在补丁中提到的行号是不正确的，并试图找到正确的位置应用每一个补丁。作为第一猜测，它采用了前面提到的行号，加或减任何偏移量，用于应用以前的主存。如果这不是正确的位置，补丁会前后扫描一组与HORK中给出的上下文相匹配的行。第一个补丁程序寻找上下文中所有行匹配的位置。如果找不到这样的位置，并且是上下文差异，并且最大模糊因子被设置为1或更多，则会忽略第一行和最后一行上下文进行另一次扫描。如果失败，并且最大模糊因子设置为2或更多，则忽略前两行和最后两行上下文，并进行另一次扫描。(默认的最大Fuzz因子为2。)")]),a._v(" "),t("p",[a._v("前缀上下文少于后缀上下文的块(在应用Fuzz之后)必须在文件的开头应用，如果它们的第一行号是1。前缀上下文多于后缀上下文的块(在应用Fuzz之后)必须在文件末尾应用。")]),a._v(" "),t("p",[a._v("如果修补程序找不到安装该修补程序的位置，它会将该块放到一个拒绝文件中，该文件通常是输出文件的名称加上.rej后缀，或者#if.rej将生成一个过长的文件名(即使在单个字符#后面加上文件名)，然后#替换文件名的最后一个字符)。被拒绝的块以统一的或上下文的diff格式出现。如果输入是一个正常的差异，那么许多上下文都是空的。拒绝文件中的块上的行号可能与修补程序文件中的行号不同：它们反映了大致位置补丁，认为失败的块属于新文件而不是旧文件。")]),a._v(" "),t("p",[a._v("当每个模块都完成时，您会被告知，如果这个块失败了，如果是的话，那么哪一行(在新的文件中)补丁认为应该继续执行。如果主程序安装在与diff中指定的行号不同的行，则会告诉您偏移量。一个单一的大偏移量可能表明一个大块头安装在错误的地方。你还会被告知，如果使用了一个模糊因素来进行匹配，那么你也应该稍微有点怀疑。如果给出了-详细的选项，你也会被告知与之完全匹配的大块头。")]),a._v(" "),t("p",[a._v("如果命令行中没有指定原始文件源文件，则修补程序试图使用以下规则从前面的垃圾中找出要编辑的文件的名称。")]),a._v(" "),t("p",[a._v("首先，patch获取候选文件名的有序列表，如下所示：")]),a._v(" "),t("p",[a._v("1）如果头是context diff，则patch在标题中使用旧的和新的文件名。如果名称没有足够的斜线来满足“-pnum”或“-strik=num”选项，则会忽略它。名称“/dev/null”也被忽略。")]),a._v(" "),t("p",[a._v("2）如果前面的垃圾中有Index：line，如果旧的和新的名称都不存在，或者如果修补程序符合POSIX，则修补程序在Index：line中使用名称。")]),a._v(" "),t("p",[a._v("3）为了下列规则的目的，候选人文件名被认为是按顺序(旧的、新的、索引的)，而不管它们在头中出现的顺序是什么。")]),a._v(" "),t("p",[a._v("然后，修补程序从候选列表中选择一个文件名，如下所示")]),a._v(" "),t("p",[a._v("1）如果存在一些已命名的文件，则修补程序选择符合POSIX的名称，否则选择最佳名称。")]),a._v(" "),t("p",[a._v("2）如果patch没有忽略RCS、ClearCase、Perforce和SCCS(请参阅-g num或-get=num选项)，并且除了找到RCS、ClearCase、Perforce或SCCS母版之外，不存在任何命名文件，则patch将选择具有RCS、ClearCase、Perforce或SCCS母版的第一个命名文件。")]),a._v(" "),t("p",[a._v("3）如果不存在命名文件，没有找到RCS、ClearCase、Perforce或SCCS母版，给出了一些名称，patch不符合POSIX，patch似乎创建了一个文件，选择了需要创建最少目录的最佳名称。")]),a._v(" "),t("p",[a._v("4）如果上面的启发式方法没有产生任何文件名，则会要求您提供要修补的文件的名称，而修补程序将选择该名称。")]),a._v(" "),t("p",[a._v("要确定非空文件名列表中的最佳名称，patch首先取所有具有最少路径名称组件的名称；然后，它以最短的basename获取所有名称；在这些名称中，它取所有最短的名称；最后，它取第一个剩余的名称。")]),a._v(" "),t("p",[a._v("所有这些的结果是，在新闻界面中，您应该能够说出如下所示")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" patch "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" /usr/src/local/blurfl\n")])])]),t("p",[a._v("直接从包含修补程序的文章中修补blurfl目录中的文件。")]),a._v(" "),t("p",[a._v("如果修补程序文件包含多个修补程序，则patch试图应用每个修补程序，就好像它们来自不同的修补程序文件一样。这意味着，除其他外，假定要修补的文件的名称必须为每个diff列表确定，而每个diff列表之前的垃圾包含有趣的内容，如前面提到的文件名和修订级别。")]),a._v(" "),t("h2",{attrs:{id:"适用范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用范围"}},[a._v("#")]),a._v(" 适用范围")]),a._v(" "),t("div",{staticClass:"svg redhat"},[a._v("RedHat")]),a._v(" "),t("div",{staticClass:"svg rhel"},[a._v("RHEL")]),a._v(" "),t("div",{staticClass:"svg ubuntu"},[a._v("Ubuntu")]),a._v(" "),t("div",{staticClass:"svg centos"},[a._v("CentOS")]),a._v(" "),t("div",{staticClass:"svg debian"},[a._v("Debian")]),a._v(" "),t("div",{staticClass:"svg deepin"},[a._v("Deepin")]),a._v(" "),t("div",{staticClass:"svg suse"},[a._v("SUSE")]),a._v(" "),t("div",{staticClass:"svg opensuse"},[a._v("openSUSE")]),a._v(" "),t("div",{staticClass:"svg fedora"},[a._v("Fedora")]),a._v(" "),t("div",{staticClass:"svg linuxmint"},[a._v("Linux Mint")]),a._v(" "),t("div",{staticClass:"svg alpinelinux"},[a._v("Alpine Linux")]),a._v(" "),t("div",{staticClass:"svg archlinux"},[a._v("Arch Linux")]),a._v(" "),t("h2",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("patch  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("选项"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("  originfile  patchfile\npatch  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-pnum")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("patchfile\n")])])]),t("h2",{attrs:{id:"选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[a._v("#")]),a._v(" 选项")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v("                           "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 产生备份文件。在修补文件时，重命名或复制原始文件，而不是删除它。当备份不存在的文件时，将创建一个空的、不可读的备份文件作为占位符来表示不存在的文件。有关如何确定备份文件名的详细信息，请参阅-V或--version-control选项。")]),a._v("\n--backup-if-missmatch        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在修补数据不完全吻合，而且没有可以要求备份文件的时候才备份。这是默认的，除非修补程序符合POSIX。")]),a._v("\n--no-backup-if-mismatch      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 如果修补程序与文件不完全匹配，如果不请求备份，则不要备份文件。这是默认的，如果补丁符合POSIX。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-B")]),a._v(" pref,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--prefix")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("pref      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用简单方法确定备份文件名(请参阅-V方法或--version-control方法选项)，并在生成备份文件名时将pref追加到文件名。例如，使用“-B /junk/”的时候，“src/patch/util.c”的简单备份文件名是“/junk/src/patch/util.c”。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-binary")]),a._v("                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 以二进制模式写入所有文件，但标准输出和/dev/tty除外。读取时，禁用将CRLF线尾转换为LF行尾的启发式方法。")]),a._v("\n-c, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--context")]),a._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将修补程序文件解释为普通上下文差异。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("dir")]),a._v(" ,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--directory")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dir    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置工作目录")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-D")]),a._v(" flag ,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--ifdef")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("define    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 用指定的标志“#ifdef…#endif”去标记修改过的地方")]),a._v("\n--dry-run                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印应用修补程序的结果，而不实际更改任何文件。")]),a._v("\n-e, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--ed")]),a._v("                     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将修补数据解释性ed命令可以识别的数据")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-E")]),a._v("                           "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 如果修补后输出的文件是空白，那么删除文件。通常，此选项是不必要的，因为修补程序可以检查标头上的时间戳，以确定修补后是否应该存在文件。但是，如果输入不是上下文差异，或者补丁符合POSIX，则除非提供此选项，否则修补程序不会删除空修补文件。当修补程序删除文件时，它还尝试删除任何空的祖先目录。")]),a._v("\n-f, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--force")]),a._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 假设用户确切地知道他或她正在做什么，并且不问任何问题。跳过标题不说明要修补哪个文件的修补程序。即使修补程序文件版本有错误的，也要执行；并假设补丁程序即使看起来是正确的")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-F")]),a._v(" num ,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--fuzz")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("num         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置最大fuzz因子。此选项仅适用于具有上下文的差异，并导致修补程序忽略多达那么多行在寻找安装的地方。请注意，一个较大的fuzz因子增加了一个错误补丁的几率。默认的fuzz因子是2，它可能不会设置为上下文差异(通常为3)中的上下文行数")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-g")]),a._v(" num ,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--get")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("num          "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 当文件处于RCS或SCCS控制下，且不存在或只读，并与默认版本匹配时，或当文件处于ClearCase或Perforce控制下且不存在时，此选项控制修补程序的操作。如果num为正，则修补程序从修订控制系统中获取(或签出)文件；如果为零，修补程序会忽略RCS、ClearCase、Perforce和SCCS而不获取该文件；如果为负数，修补程序将询问用户是否获取该文件。如果设置了PATCH_GET环境变量，则该选项的默认值为零；否则，默认值为零。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" ,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--input")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("patchfile "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 读取指定的修补文件")]),a._v("\n-l, --ignore-whitespace      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 松散匹配模式，以防tabs或空格在文件中被咀嚼。修补程序文件中的一个或多个空白序列与原始文件中的任何序列匹配，以及行尾的空白序列都被忽略。正常字符必须仍然完全匹配。上下文的每一行仍必须与原始文件中的一行匹配。")]),a._v("\n-n, normal                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将修补数据解释成一般性的差异")]),a._v("\n-N, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--forward")]),a._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 忽略似乎已反转或已应用的修补程序")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" outfile ,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--output")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("outfile "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置输出文件。如果outfile是要修补的文件之一，请不要使用此选项。当outfile为-时，将输出发送到标准输出，并发送通常会转到标准输出到标准错误的任何消息")]),a._v("\n-pnum, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--strip")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("num           "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置要剥离的路径层数。例如，假设修补程序文件中的文件名是“/u/howard/src/blurfl/blurfl.c”，使用-p0则不会修改，使用-p1结果是“u/howard/src/blurfl/blurfl.c”，使用-p4结果是“blurfl/blurfl.c”")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--posix")]),a._v("                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 更严格地遵守POSIX标准：当从diff头直观文件名时，从列表(旧的、新的、索引)获取第一个现有文件；不要删除修补后为空的文件；不要问是从RCS、ClearCase、Perforce还是SCCS获取文件；要求命令行中的文件前面有所有选项；当出现不匹配时，不要备份文件。")]),a._v("\n--quoting-style"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("word         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用样式字引用输出名称。这个词应该是下列之一：")]),a._v("\n                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - literal，不改变输出")]),a._v("\n                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - shell，如果shell包含shell元字符或将导致不明确的输出，则引用shell的名称。")]),a._v("\n                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - shell-always，引用shell的名称，即使它们通常不需要引用。")]),a._v("\n                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - c，引用C语言字符串的名称。")]),a._v("\n                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - escape，除省略周围的双引号字符外，引用与c相同。")]),a._v("\n                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - 你可以使用环境变量QUOTING_STYLE来设置这个选项的默认值，如果没有环境变量，那么默认shell。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-r")]),a._v(" rejectfile ,  --reject-file"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("rejectfile "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将拒绝放入拒绝文件，而不是默认的.rej文件。当拒绝文件为‘-’时，丢弃拒绝")]),a._v("\n-R, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--reverse")]),a._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 假设此修补程序是用交换的旧文件和新文件创建的。修补程序尝试在应用之前交换每一个块。拒绝以交换格式出现。-R选项不适用于“ed diff”脚本，因为信息太少，无法重建反向操作。")]),a._v("\n--reject-format"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("format       "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 以指定的格式(上下文或统一格式)生成拒绝文件。如果没有此选项，如果输入补丁是该格式的，则被拒绝的块以统一的diff格式出现，否则以普通的上下文diff形式出现。")]),a._v("\n-s, --silent, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--quite")]),a._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 不显示执行过程，除非发生错误")]),a._v("\n-t, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--batch")]),a._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 自动跳过错误。")]),a._v("\n-u, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--unified")]),a._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将修补数据解释成一致化的差异")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--verbose")]),a._v("                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 显示详细执行过程")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-V")]),a._v(" method, --version-control"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("method "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 确定备份文件名。method还可以由PATCH_VERSION_CONTROL、VERSION_CONTROL环境变量提供，环境变量被此选项覆盖。该方法不影响是否生成备份文件；它只影响已生成的任何备份文件的名称。method的有效值可以是：")]),a._v("\n                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - existing，nil，对已经有编号的文件进行编号备份，否则进行简单备份。这是默认的")]),a._v("\n                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - numbered，t，进行编号备份。例如F的编号备份文件名为F~N~其中N是版本号。")]),a._v("\n                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# - simple，never，做简单的备份。-B或--prefix、-Y或--basename-prefix、-z或--suffix选项指定简单的备份文件名。如果没有给出这些选项，则使用一个简单的备份后缀；如果设置了SIMPLE_BACKUP_SUFFIX环境变量的值，则为.orig。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-x")]),a._v(" num ,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--debug")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("num       "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 只将感兴趣的内部调试标志设置为修补程序")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Y")]),a._v(" preg ,  --basename-prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("pref "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用简单方法确定备份文件名(请参阅-V)，并在生成备份文件名时将pref前缀为文件名的basename。例如，使用“-Y .del/”选项，“src/patch/util.c”的简单备份文件名是“src/patch/.del/util.c”。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-z")]),a._v(" suffix ,  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--suffix")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("suffix "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用简单方法确定备份文件名(请参阅-V)，并使用suffix作为后缀。例如，使用“-z -”选项，“src/patch/util.c”的备份文件名是“src/patch/util.c-”。")]),a._v("\n-Z, --set-utc               "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 根据上下文diff标头中给出的时间戳设置修补文件的修改和访问时间，假设上下文diff标头使用协调的通用时间(UTC，通常称为GMT)。")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--help")]),a._v("                           "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 显示帮助文档")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--version")]),a._v("                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 显示命令版本信息")]),a._v("\n")])])]),t("h2",{attrs:{id:"环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[a._v("#")]),a._v(" 环境变量")]),a._v(" "),t("ul",[t("li",[a._v("PATCH_GET，这指定默认情况下修补程序是否会丢失rcs、ClearCase、Perforce或sccs中的只读文件；请参阅-g或-get选项。")]),a._v(" "),t("li",[a._v("POSIXLY_CORRECT，如果已设置，则默认情况下补丁程序更严格地符合POSIX标准：请参见-POSIX选项。")]),a._v(" "),t("li",[a._v("QUOTING_STYLE，--quoting-style选项的默认值。")]),a._v(" "),t("li",[a._v("SIMPLE_BACKUP_SUFFIX，扩展名用于简单备份文件名，而不是.orig")]),a._v(" "),t("li",[a._v("TMPDIR, TMP, TEM，放置临时文件的目录；修补程序使用此列表中设置的第一个环境变量。如果没有设置，则默认值依赖于系统；在unix主机上通常是/tmp。")]),a._v(" "),t("li",[a._v("VERSION_CONTROL or PATCH_VERSION_CONTROL，选择版本控制样式。")])]),a._v(" "),t("h2",{attrs:{id:"patch发送者注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#patch发送者注意事项"}},[a._v("#")]),a._v(" patch发送者注意事项")]),a._v(" "),t("p",[a._v("如果你要发送补丁，有几件事你应该记住：")]),a._v(" "),t("p",[a._v("系统地创建补丁。一个很好的方法是命令“diff  -Naur  old  new”。旧名和新名不应包含任何斜杠。diff命令的标题应该使用传统的Unix格式在通用时间中有日期和时间，这样补丁接收者就可以使用-Z或--set-utc选项。下面是一个示例命令，使用Bourneshell语法：“LC_ALL=C  TZ=UTC0  diff  -Naur  gcc-2.7   gcc-2.8”。")]),a._v(" "),t("p",[a._v("告诉收件人如何应用修补程序，方法是告诉收件人要到哪个目录，以及要使用哪个修补程序选项。建议使用String-Np1选项。通过冒充收件人并将修补程序应用于原始文件的副本来测试您的过程。")]),a._v(" "),t("p",[a._v("您可以通过保存patchlevel.h文件来减轻人们的痛苦，该文件修补程序可以增加补丁级别，作为您发送的补丁文件中的第一个差异。如果您在补丁中放了一个prereq：line，它不会让它们在没有警告的情况下按顺序应用补丁。")]),a._v(" "),t("p",[a._v("您可以通过发送一个比较/dev/null的diff或一个日期为Epoch(1970-01-01：00：00：00 UTC)的空文件来创建一个文件。只有当要创建的文件在目标目录中不存在时，这才有效。相反，您可以通过发送上下文diff来删除文件，将要删除的文件与日期为Epoch的空文件进行比较。该文件将被删除，除非补丁符合POSIX和-E或-删除-空-文件选项没有提供。生成创建和删除文件的修补程序的一种简单方法是使用GNU diff的-N或-new-file选项。")]),a._v(" "),t("p",[a._v("如果收件人应该使用-pn选项，则不要发送如下所示的输出：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Naur")]),a._v(" v2.0.29/prog/README prog/README\n--- v2.0.29/prog/README   Mon Mar "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v(":13:12 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1997")]),a._v("\n+++ prog/README   Mon Mar "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("14")]),a._v(":58:22 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1997")]),a._v("\n")])])]),t("p",[a._v("因为这两个文件名有不同的斜杠数，不同版本的修补程序对文件名的解释也不同。为了避免混淆，请发送如下所示的输出：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Naur")]),a._v(" v2.0.29/prog/README v2.0.30/prog/README\n--- v2.0.29/prog/README   Mon Mar "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v(":13:12 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1997")]),a._v("\n+++ v2.0.30/prog/README   Mon Mar "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("14")]),a._v(":58:22 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1997")]),a._v("\n")])])]),t("p",[a._v("避免发送比较备份文件名(如README.orig)的修补程序，因为这可能会将补丁混淆为修补备份文件而不是真正的文件。相反，发送比较不同目录中相同的基本文件名的修补程序，例如，old/README和New/README")]),a._v(" "),t("p",[a._v("注意不要发出反向补丁，因为它使人们怀疑他们是否已经应用了补丁。")]),a._v(" "),t("p",[a._v("尽量不要让修补程序修改派生文件(例如，您的Makefile文件配置中有一行configure: configure.in)，因为接收方无论如何都应该能够重新生成派生文件。如果必须发送派生文件的差异，则使用UTC生成差异，让接收方使用-z或-set-utc选项应用修补程序，并让它们删除任何依赖于修补文件的未修补文件(例如，使用make干净)。")]),a._v(" "),t("p",[a._v("虽然您可以通过将582个不同的列表放到一个文件中而不受影响，但最好将相关的补丁分组到单独的文件中，以防出现混乱。")]),a._v(" "),t("h2",{attrs:{id:"警告"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#警告"}},[a._v("#")]),a._v(" 警告")]),a._v(" "),t("p",[a._v("上下文差异不能可靠地表示空文件、空目录或符号链接等特殊文件的创建或删除。它们也不能表示对文件元数据的更改，如所有权、权限或一个文件是否是另一个文件的硬链接。如果这样的更改也是必需的，那么单独的指令(例如shell脚本)应该伴随补丁。")]),a._v(" "),t("p",[a._v("patch无法判断在ed脚本中行号是否关闭，只有在发现更改或删除时，才能在普通差异中检测到不良行号。使用模糊因子3的上下文差异可能存在同样的问题。在这些情况下，您可能应该做一个上下文差异，看看这些更改是否有意义。当然，没有错误的编译是一个很好的指示，表明补丁可以工作，但并不总是这样。")]),a._v(" "),t("p",[a._v("patch通常会产生正确的结果，即使需要进行大量的猜测。但是，只有当修补程序应用于与修补程序生成的文件完全相同的版本时，才能保证结果是正确的。")]),a._v(" "),t("h2",{attrs:{id:"举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[a._v("#")]),a._v(" 举例")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" test.txt test2.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" diff.txt\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" diff.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(",2d0\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" 石家庄今日新增16例确诊病例\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" 中国留美博士遇害 美驻华使馆慰问\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(",6c2,3\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" 理塘文旅公司回应丁真抽烟\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" 北京一确诊者隐瞒行程不配合流调\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" 山西晋中新增2例无症状感染者\n---\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("月11日，美国第一夫人梅拉尼娅·特朗普通过白宫发表声明，谴责上周发生在美国国会的暴乱。\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("$ patch "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p0")]),a._v(" test.txt diff.txt\npatching "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" test.txt\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" test.txt\n特朗普夫人发文谴责国会暴乱\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("月11日，美国第一夫人梅拉尼娅·特朗普通过白宫发表声明，谴责上周发生在美国国会的暴乱。\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("sogrey@bogon demos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("$ \n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);