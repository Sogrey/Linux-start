(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{562:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"sed-功能强大的流式文本编辑器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sed-功能强大的流式文本编辑器"}},[t._v("#")]),t._v(" sed - 功能强大的流式文本编辑器")]),t._v(" "),s("p",[t._v("sed是一种流编辑器，用来从输入流中读取内容并完成转换，输入流可以来自一个文件，也可以来自一个管道。")]),t._v(" "),s("p",[t._v("sed 是一种流编辑器，它是文本处理中非常重要的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。")]),t._v(" "),s("h2",{attrs:{id:"适用范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用范围"}},[t._v("#")]),t._v(" 适用范围")]),t._v(" "),s("div",{staticClass:"svg redhat"},[t._v("RedHat")]),t._v(" "),s("div",{staticClass:"svg rhel"},[t._v("RHEL")]),t._v(" "),s("div",{staticClass:"svg ubuntu"},[t._v("Ubuntu")]),t._v(" "),s("div",{staticClass:"svg centos"},[t._v("CentOS")]),t._v(" "),s("div",{staticClass:"svg debian"},[t._v("Debian")]),t._v(" "),s("div",{staticClass:"svg deepin"},[t._v("Deepin")]),t._v(" "),s("div",{staticClass:"svg suse"},[t._v("SUSE")]),t._v(" "),s("div",{staticClass:"svg opensuse"},[t._v("openSUSE")]),t._v(" "),s("div",{staticClass:"svg fedora"},[t._v("Fedora")]),t._v(" "),s("div",{staticClass:"svg linuxmint"},[t._v("Linux Mint")]),t._v(" "),s("div",{staticClass:"svg alpinelinux"},[t._v("Alpine Linux")]),t._v(" "),s("div",{staticClass:"svg archlinux"},[t._v("Arch Linux")]),t._v(" "),s("h2",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'command'")]),t._v(" file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" scriptfile file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[t._v("#")]),t._v(" 选项")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-n, --quite, "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--slient")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 静默模式")]),t._v("\n-e, "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--expression")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("script                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 给指令添加脚本")]),t._v("\n-f, "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--file")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("script-file                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将文件内容作为脚本，追加给指令")]),t._v("\n--follow-symlinks                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理到位时遵循符号链接；硬链接仍将被破坏。")]),t._v("\n-i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("SUFFIX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",  --in-place"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("SUFFIX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编辑文件到位(如果提供了扩展名，则进行备份)")]),t._v("\n                                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 认的操作模式是中断符号链接和硬链接。")]),t._v("\n                                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这可以通过跟随符号链接和复制来改变。")]),t._v("\n-c,  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--copy")]),t._v("                            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当在-i模式下对文件进行洗牌时，请使用复制而不是重命名。")]),t._v("\n                                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 虽然这将避免断开链接(符号或硬链接)，但结果的编辑操作并不是原子操作。")]),t._v("\n                                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这很少是想要的模式；-遵循符号链接通常就足够了，而且它更快、更安全。")]),t._v("\n-l, --line-length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("N                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定每一行最大字符数，超过就自动换行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--posix")]),t._v("                                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 禁用所有的GNU表达式")]),t._v("\n-r, --regexp-extended                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在脚本中使用扩展正则表达式。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v("                                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将文件看作是分离的，而不是单独连续的长字符串")]),t._v("\n-u, "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--unbuffered")]),t._v("                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从输入文件中加载最少数量的数据，并更频繁地刷新输出缓冲区。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--help")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示帮助文档")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v("                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示命令版本信息")]),t._v("\n")])])]),s("p",[t._v("如果没有给出-e、--expression,、-f或-file选项，那么第一个非选项参数将作为sed脚本进行解释。其余的参数都是输入文件的名称；如果没有指定输入文件，则读取标准输入。")]),t._v(" "),s("p",[s("strong",[t._v("没有地址的命令")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v(":label         b和t命令的标签\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#comment       注释将扩展到下一行(或-e脚本片段的末尾)。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("块的结束括号\n")])])]),s("p",[s("strong",[t._v("没有地址或者一个地址的命令")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("            打印当前的行号\n\na "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\ntext          追加文本，在换行符之前有一个嵌入的反斜杠\n\ni "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\ntext           插入文本，在换行符之前有一个嵌入的反斜杠\n\nq "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exit-code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  立即退出sed脚本，而不处理任何更多的输入，除非自动打印没有被禁用，当前的模式空间将被打印出来。退出代码参数是一个GNU扩展。\n\nQ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exit-code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  立即退出sed脚本，而不处理任何更多的输入。这是一个GNU扩展\n\nr filename  附加从文件中读取的文本。\n\nR filename  附加从文件读取的一行。命令的每次调用都从文件中读取一行。\n")])])]),s("p",[s("strong",[t._v("接受地址范围的命令")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("           开始一个命令块"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("以"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("结尾"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nb label     分支到标签；如果省略标签，则分支到脚本的末尾。\n\nt label     如果“s///”自读取上一个输入行以来以及从最后一个t或T命令开始已成功地进行了替换，则从“分支到标签”；如果省略“标签”，则将其分支到脚本的末尾。\n\nT label     如果自读取上一个输入行以来，以及自最后一个t或T命令以来，没有“s///”已成功地进行了替换，则从“分支到标签”；如果省略“标签”，则从“分支到脚本的末尾”。这是一个GNU扩展。\n\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(" \ntext         用文本替换徐那种的行，在换行符之前有一个嵌入的反斜杠\n\nd            删除模式空间。开始下一个周期。\n\nD           删除模式空间中的第一个嵌入换行符。开始下一个周期，但如果模式空格中仍然有数据，则跳过从输入中读取。\n\nh H         复制/追加模式空间到保持空间\n\ng G         复制/追加保持空间到模式空间\n\nx           交换持有空格和模式空格的内容\n\nl           以“视觉清晰”的形式列出当前行。\n\nl width     以“视觉清晰”的形式列出当前行，在宽度width处将其拆分。这是一个GNU扩展。\n\nn N        在模式空间中读取/追加下一行输入\n\np          打印到当前模式空间\n\nP          打印到当前模式空间的第一个嵌入换行符\n\ns/regexp/replacement/      尝试将regexp与模式空间匹配。如果成功，则将该部分替换为替换部分。替换可以包含特殊字符"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("引用匹配的模式空间的那一部分，特殊转义"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("到"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("引用regexp中相应的匹配子表达式。\n\nw filename     将当前模式空间写入文件名\n\nW filename     将当前模式空间的第一行写入文件名。这是一个GNU扩展。\n\ny/source/dest/    将在源中出现的模式空间中的字符音译为dst中相应的字符。\n")])])]),s("h2",{attrs:{id:"地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#地址"}},[t._v("#")]),t._v(" 地址")]),t._v(" "),s("p",[t._v("SED命令可以在没有地址的情况下给出，在这种情况下，命令将对所有输入行执行；使用一个地址，则只对与该地址匹配的输入行执行该命令；或者使用两个地址，在这种情况下，将对所有与从第一个地址开始并继续到第二个地址的包含行范围匹配的输入行执行命令。关于地址范围，需要注意三件事：语法是addr 1，addr 2(即地址用逗号分隔)；addr 1匹配的行将始终被接受，即使addr 2选择了前面的行；如果addr 2是regexp，则不会根据addr 1匹配的行对其进行测试。")]),t._v(" "),s("p",[t._v("在地址(或地址范围)之后，在命令之前，可以插入一个“！”，这指定只有当地址(或地址范围)不匹配时才执行命令。支持以下的地址类型")]),t._v(" "),s("ul",[s("li",[t._v("number，只匹配指定的行号。")]),t._v(" "),s("li",[t._v("first~step，从指定的行first开始，每step行匹配一次。")]),t._v(" "),s("li",[t._v("$，匹配最后一行。")]),t._v(" "),s("li",[t._v("/regexp/，匹配正则表达式regexp的行。")]),t._v(" "),s("li",[t._v("\\cregexpc，匹配正则表达式regexp的行。c可以是任何字符")]),t._v(" "),s("li",[t._v("0,addr2，从“匹配的第一个地址”状态开始，直到找到addr 2为止。这类似于1，addr 2，但如果addr 2匹配输入的第一行0，addr 2表单将位于其范围的末尾，而1，addr 2窗体仍将位于其范围的开头。这只在addr 2是正则表达式时才起作用。")]),t._v(" "),s("li",[t._v("addr1,+N，将匹配addr 1和addr 1后面的N行。")]),t._v(" "),s("li",[t._v("addr1,~N，将匹配addr 1和addr 1后面的行，直到输入行号为N的倍数的下一行为止。")])]),t._v(" "),s("h2",{attrs:{id:"举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sogrey@bogon demo4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" test.txt\neeeiee eeiee\nhello world"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sogrey@bogon demo4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" r test.txt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" test22.txt  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将test.txt读取，写入到test22.txt")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sogrey@bogon demo4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" test22.txt\neeeiee eeiee\nhello world"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sogrey@bogon demo4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ \n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);